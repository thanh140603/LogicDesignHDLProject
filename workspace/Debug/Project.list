
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002664  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002794  08002794  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002794  08002794  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002794  08002794  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800279c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000058  080027f4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080027f4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087a7  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bed  00000000  00000000  0002886b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c0  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ffb  00000000  00000000  0002b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c143  00000000  00000000  00042643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084623  00000000  00000000  0004e786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002804  00000000  00000000  000d2dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d55b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002758 	.word	0x08002758

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002758 	.word	0x08002758

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 8000154:	4a0a      	ldr	r2, [pc, #40]	; (8000180 <isButtonPressed+0x34>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d10a      	bne.n	8000176 <isButtonPressed+0x2a>
		HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000160:	2120      	movs	r1, #32
 8000162:	4808      	ldr	r0, [pc, #32]	; (8000184 <isButtonPressed+0x38>)
 8000164:	f001 fad7 	bl	8001716 <HAL_GPIO_TogglePin>
		button_flag[i] = 0;
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <isButtonPressed+0x34>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2100      	movs	r1, #0
 800016e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000172:	2301      	movs	r3, #1
 8000174:	e000      	b.n	8000178 <isButtonPressed+0x2c>
	}
	return 0;
 8000176:	2300      	movs	r3, #0

}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	20000074 	.word	0x20000074
 8000184:	40010800 	.word	0x40010800

08000188 <subKeyProcess>:

void subKeyProcess(int i){
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000190:	4a04      	ldr	r2, [pc, #16]	; (80001a4 <subKeyProcess+0x1c>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2101      	movs	r1, #1
 8000196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000074 	.word	0x20000074

080001a8 <getKeyInput>:

void getKeyInput(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
for(int i=0; i<BUTTONS_NUMBER; i++){
 80001ae:	2300      	movs	r3, #0
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	e089      	b.n	80002c8 <getKeyInput+0x120>
  KeyReg2[i] = KeyReg1[i];
 80001b4:	4a49      	ldr	r2, [pc, #292]	; (80002dc <getKeyInput+0x134>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001bc:	4948      	ldr	r1, [pc, #288]	; (80002e0 <getKeyInput+0x138>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 80001c4:	4a47      	ldr	r2, [pc, #284]	; (80002e4 <getKeyInput+0x13c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4943      	ldr	r1, [pc, #268]	; (80002dc <getKeyInput+0x134>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if(i == 0)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d10f      	bne.n	80001fa <getKeyInput+0x52>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, buttonsArr[i]);
 80001da:	4a43      	ldr	r2, [pc, #268]	; (80002e8 <getKeyInput+0x140>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	4619      	mov	r1, r3
 80001e6:	4841      	ldr	r0, [pc, #260]	; (80002ec <getKeyInput+0x144>)
 80001e8:	f001 fa66 	bl	80016b8 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	4a3c      	ldr	r2, [pc, #240]	; (80002e4 <getKeyInput+0x13c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001f8:	e021      	b.n	800023e <getKeyInput+0x96>
  else if(i ==1)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d10f      	bne.n	8000220 <getKeyInput+0x78>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, buttonsArr[i]);
 8000200:	4a39      	ldr	r2, [pc, #228]	; (80002e8 <getKeyInput+0x140>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000208:	b29b      	uxth	r3, r3
 800020a:	4619      	mov	r1, r3
 800020c:	4838      	ldr	r0, [pc, #224]	; (80002f0 <getKeyInput+0x148>)
 800020e:	f001 fa53 	bl	80016b8 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a33      	ldr	r2, [pc, #204]	; (80002e4 <getKeyInput+0x13c>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800021e:	e00e      	b.n	800023e <getKeyInput+0x96>
  else
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, buttonsArr[i]);
 8000220:	4a31      	ldr	r2, [pc, #196]	; (80002e8 <getKeyInput+0x140>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000228:	b29b      	uxth	r3, r3
 800022a:	4619      	mov	r1, r3
 800022c:	4830      	ldr	r0, [pc, #192]	; (80002f0 <getKeyInput+0x148>)
 800022e:	f001 fa43 	bl	80016b8 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	4619      	mov	r1, r3
 8000236:	4a2b      	ldr	r2, [pc, #172]	; (80002e4 <getKeyInput+0x13c>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <getKeyInput+0x134>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	4927      	ldr	r1, [pc, #156]	; (80002e4 <getKeyInput+0x13c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024e:	429a      	cmp	r2, r3
 8000250:	d137      	bne.n	80002c2 <getKeyInput+0x11a>
 8000252:	4a22      	ldr	r2, [pc, #136]	; (80002dc <getKeyInput+0x134>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025a:	4921      	ldr	r1, [pc, #132]	; (80002e0 <getKeyInput+0x138>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000262:	429a      	cmp	r2, r3
 8000264:	d12d      	bne.n	80002c2 <getKeyInput+0x11a>
    if (KeyReg2[i] != KeyReg3[i]){
 8000266:	4a1e      	ldr	r2, [pc, #120]	; (80002e0 <getKeyInput+0x138>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026e:	4921      	ldr	r1, [pc, #132]	; (80002f4 <getKeyInput+0x14c>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000276:	429a      	cmp	r2, r3
 8000278:	d015      	beq.n	80002a6 <getKeyInput+0xfe>
      KeyReg3[i] = KeyReg2[i];
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <getKeyInput+0x138>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000282:	491c      	ldr	r1, [pc, #112]	; (80002f4 <getKeyInput+0x14c>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 800028a:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <getKeyInput+0x14c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d115      	bne.n	80002c2 <getKeyInput+0x11a>
        TimeOutForKeyPress = 500;
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <getKeyInput+0x150>)
 8000298:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800029c:	601a      	str	r2, [r3, #0]
        subKeyProcess(i);
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f7ff ff72 	bl	8000188 <subKeyProcess>
 80002a4:	e00d      	b.n	80002c2 <getKeyInput+0x11a>
      }
    }else{
       TimeOutForKeyPress --;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <getKeyInput+0x150>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <getKeyInput+0x150>)
 80002ae:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <getKeyInput+0x150>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d104      	bne.n	80002c2 <getKeyInput+0x11a>
          KeyReg3[i] = NORMAL_STATE;
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <getKeyInput+0x14c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2101      	movs	r1, #1
 80002be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(int i=0; i<BUTTONS_NUMBER; i++){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	f77f af72 	ble.w	80001b4 <getKeyInput+0xc>
        }
    }
  }
}
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000018 	.word	0x20000018
 80002e0:	20000024 	.word	0x20000024
 80002e4:	2000000c 	.word	0x2000000c
 80002e8:	20000000 	.word	0x20000000
 80002ec:	40010c00 	.word	0x40010c00
 80002f0:	40011000 	.word	0x40011000
 80002f4:	20000030 	.word	0x20000030
 80002f8:	2000003c 	.word	0x2000003c

080002fc <displayFirstLedCouple>:
 *      Author: ad
 */
#include "display_led.h"


void displayFirstLedCouple(enum LedState state_1){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d84f      	bhi.n	80003ac <displayFirstLedCouple+0xb0>
 800030c:	a201      	add	r2, pc, #4	; (adr r2, 8000314 <displayFirstLedCouple+0x18>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000325 	.word	0x08000325
 8000318:	08000347 	.word	0x08000347
 800031c:	0800038b 	.word	0x0800038b
 8000320:	08000369 	.word	0x08000369
	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032a:	4823      	ldr	r0, [pc, #140]	; (80003b8 <displayFirstLedCouple+0xbc>)
 800032c:	f001 f9db 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000330:	2200      	movs	r2, #0
 8000332:	2102      	movs	r1, #2
 8000334:	4820      	ldr	r0, [pc, #128]	; (80003b8 <displayFirstLedCouple+0xbc>)
 8000336:	f001 f9d6 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 800033a:	2200      	movs	r2, #0
 800033c:	2101      	movs	r1, #1
 800033e:	481e      	ldr	r0, [pc, #120]	; (80003b8 <displayFirstLedCouple+0xbc>)
 8000340:	f001 f9d1 	bl	80016e6 <HAL_GPIO_WritePin>
			 break;
 8000344:	e033      	b.n	80003ae <displayFirstLedCouple+0xb2>
	 case RED:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034c:	481a      	ldr	r0, [pc, #104]	; (80003b8 <displayFirstLedCouple+0xbc>)
 800034e:	f001 f9ca 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4818      	ldr	r0, [pc, #96]	; (80003b8 <displayFirstLedCouple+0xbc>)
 8000358:	f001 f9c5 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1) ;
 800035c:	2201      	movs	r2, #1
 800035e:	2101      	movs	r1, #1
 8000360:	4815      	ldr	r0, [pc, #84]	; (80003b8 <displayFirstLedCouple+0xbc>)
 8000362:	f001 f9c0 	bl	80016e6 <HAL_GPIO_WritePin>
			 break;
 8000366:	e022      	b.n	80003ae <displayFirstLedCouple+0xb2>
	 case YELLOW:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036e:	4812      	ldr	r0, [pc, #72]	; (80003b8 <displayFirstLedCouple+0xbc>)
 8000370:	f001 f9b9 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1) ;
 8000374:	2201      	movs	r2, #1
 8000376:	2102      	movs	r1, #2
 8000378:	480f      	ldr	r0, [pc, #60]	; (80003b8 <displayFirstLedCouple+0xbc>)
 800037a:	f001 f9b4 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	480d      	ldr	r0, [pc, #52]	; (80003b8 <displayFirstLedCouple+0xbc>)
 8000384:	f001 f9af 	bl	80016e6 <HAL_GPIO_WritePin>
			 break;
 8000388:	e011      	b.n	80003ae <displayFirstLedCouple+0xb2>
	 case GREEN:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 800038a:	2201      	movs	r2, #1
 800038c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <displayFirstLedCouple+0xbc>)
 8000392:	f001 f9a8 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0) ;
 8000396:	2200      	movs	r2, #0
 8000398:	2102      	movs	r1, #2
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <displayFirstLedCouple+0xbc>)
 800039c:	f001 f9a3 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0) ;
 80003a0:	2200      	movs	r2, #0
 80003a2:	2101      	movs	r1, #1
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <displayFirstLedCouple+0xbc>)
 80003a6:	f001 f99e 	bl	80016e6 <HAL_GPIO_WritePin>
			 break;
 80003aa:	e000      	b.n	80003ae <displayFirstLedCouple+0xb2>
	 default:
		 break;
 80003ac:	bf00      	nop
	}
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010800 	.word	0x40010800

080003bc <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d853      	bhi.n	8000474 <displaySecondLedCouple+0xb8>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <displaySecondLedCouple+0x18>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	080003e5 	.word	0x080003e5
 80003d8:	08000409 	.word	0x08000409
 80003dc:	08000451 	.word	0x08000451
 80003e0:	0800042d 	.word	0x0800042d
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 80003e4:	2200      	movs	r2, #0
 80003e6:	2110      	movs	r1, #16
 80003e8:	4825      	ldr	r0, [pc, #148]	; (8000480 <displaySecondLedCouple+0xc4>)
 80003ea:	f001 f97c 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f4:	4822      	ldr	r0, [pc, #136]	; (8000480 <displaySecondLedCouple+0xc4>)
 80003f6:	f001 f976 	bl	80016e6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000400:	481f      	ldr	r0, [pc, #124]	; (8000480 <displaySecondLedCouple+0xc4>)
 8000402:	f001 f970 	bl	80016e6 <HAL_GPIO_WritePin>
			 break;
 8000406:	e036      	b.n	8000476 <displaySecondLedCouple+0xba>
		case RED:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 8000408:	2200      	movs	r2, #0
 800040a:	2110      	movs	r1, #16
 800040c:	481c      	ldr	r0, [pc, #112]	; (8000480 <displaySecondLedCouple+0xc4>)
 800040e:	f001 f96a 	bl	80016e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000418:	4819      	ldr	r0, [pc, #100]	; (8000480 <displaySecondLedCouple+0xc4>)
 800041a:	f001 f964 	bl	80016e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1) ;
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000424:	4816      	ldr	r0, [pc, #88]	; (8000480 <displaySecondLedCouple+0xc4>)
 8000426:	f001 f95e 	bl	80016e6 <HAL_GPIO_WritePin>
			break;
 800042a:	e024      	b.n	8000476 <displaySecondLedCouple+0xba>
		case YELLOW:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 800042c:	2200      	movs	r2, #0
 800042e:	2110      	movs	r1, #16
 8000430:	4813      	ldr	r0, [pc, #76]	; (8000480 <displaySecondLedCouple+0xc4>)
 8000432:	f001 f958 	bl	80016e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1) ;
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043c:	4810      	ldr	r0, [pc, #64]	; (8000480 <displaySecondLedCouple+0xc4>)
 800043e:	f001 f952 	bl	80016e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <displaySecondLedCouple+0xc4>)
 800044a:	f001 f94c 	bl	80016e6 <HAL_GPIO_WritePin>
			break;
 800044e:	e012      	b.n	8000476 <displaySecondLedCouple+0xba>
		case GREEN:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 8000450:	2201      	movs	r2, #1
 8000452:	2110      	movs	r1, #16
 8000454:	480a      	ldr	r0, [pc, #40]	; (8000480 <displaySecondLedCouple+0xc4>)
 8000456:	f001 f946 	bl	80016e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0) ;
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000460:	4807      	ldr	r0, [pc, #28]	; (8000480 <displaySecondLedCouple+0xc4>)
 8000462:	f001 f940 	bl	80016e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0) ;
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046c:	4804      	ldr	r0, [pc, #16]	; (8000480 <displaySecondLedCouple+0xc4>)
 800046e:	f001 f93a 	bl	80016e6 <HAL_GPIO_WritePin>
			break;
 8000472:	e000      	b.n	8000476 <displaySecondLedCouple+0xba>
		default:
		  break;
 8000474:	bf00      	nop
   }
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010800 	.word	0x40010800

08000484 <toggleLeds>:

void toggleLeds(enum LedState state){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	switch(state){
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d00f      	beq.n	80004b4 <toggleLeds+0x30>
 8000494:	2b03      	cmp	r3, #3
 8000496:	dc21      	bgt.n	80004dc <toggleLeds+0x58>
 8000498:	2b01      	cmp	r3, #1
 800049a:	d015      	beq.n	80004c8 <toggleLeds+0x44>
 800049c:	2b02      	cmp	r3, #2
 800049e:	d11d      	bne.n	80004dc <toggleLeds+0x58>
	 case GREEN:
			 HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
 80004a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <toggleLeds+0x64>)
 80004a6:	f001 f936 	bl	8001716 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
 80004aa:	2110      	movs	r1, #16
 80004ac:	480e      	ldr	r0, [pc, #56]	; (80004e8 <toggleLeds+0x64>)
 80004ae:	f001 f932 	bl	8001716 <HAL_GPIO_TogglePin>
			 break;
 80004b2:	e014      	b.n	80004de <toggleLeds+0x5a>
	 case YELLOW:
			 HAL_GPIO_TogglePin( YELLOW1_GPIO_Port , YELLOW1_Pin) ;
 80004b4:	2102      	movs	r1, #2
 80004b6:	480c      	ldr	r0, [pc, #48]	; (80004e8 <toggleLeds+0x64>)
 80004b8:	f001 f92d 	bl	8001716 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( YELLOW2_GPIO_Port , YELLOW2_Pin) ;
 80004bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <toggleLeds+0x64>)
 80004c2:	f001 f928 	bl	8001716 <HAL_GPIO_TogglePin>
			 break;
 80004c6:	e00a      	b.n	80004de <toggleLeds+0x5a>
	 case RED:
			 HAL_GPIO_TogglePin( RED1_GPIO_Port , RED1_Pin) ;
 80004c8:	2101      	movs	r1, #1
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <toggleLeds+0x64>)
 80004cc:	f001 f923 	bl	8001716 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( RED2_GPIO_Port , RED2_Pin) ;
 80004d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <toggleLeds+0x64>)
 80004d6:	f001 f91e 	bl	8001716 <HAL_GPIO_TogglePin>
			 break;
 80004da:	e000      	b.n	80004de <toggleLeds+0x5a>
	 default:
		 break;
 80004dc:	bf00      	nop
	}
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010800 	.word	0x40010800

080004ec <auto_run>:
 *      Author: ad
 */
#include "fsm_auto.h"


void auto_run(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1 ){
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff fe2b 	bl	800014c <isButtonPressed>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d102      	bne.n	8000502 <auto_run+0x16>
//		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
//		                          |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
		MODE = MODE2;
 80004fc:	4b8f      	ldr	r3, [pc, #572]	; (800073c <auto_run+0x250>)
 80004fe:	2202      	movs	r2, #2
 8000500:	701a      	strb	r2, [r3, #0]
	}
	if(MODE == MODE1){
 8000502:	4b8e      	ldr	r3, [pc, #568]	; (800073c <auto_run+0x250>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	f040 8115 	bne.w	8000736 <auto_run+0x24a>
		switch(firstCoupleLedAutoState){
 800050c:	4b8c      	ldr	r3, [pc, #560]	; (8000740 <auto_run+0x254>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d867      	bhi.n	80005e4 <auto_run+0xf8>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <auto_run+0x30>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	0800052d 	.word	0x0800052d
 8000520:	0800053d 	.word	0x0800053d
 8000524:	08000575 	.word	0x08000575
 8000528:	080005ad 	.word	0x080005ad
			case LED_INIT:
				firstCoupleLedAutoState = RED;
 800052c:	4b84      	ldr	r3, [pc, #528]	; (8000740 <auto_run+0x254>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
				setTimer(0, 100);
 8000532:	2164      	movs	r1, #100	; 0x64
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fce7 	bl	8000f08 <setTimer>
				break;
 800053a:	e05a      	b.n	80005f2 <auto_run+0x106>
			case RED:
				displayFirstLedCouple(RED);
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff fedd 	bl	80002fc <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 8000542:	4b80      	ldr	r3, [pc, #512]	; (8000744 <auto_run+0x258>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d14e      	bne.n	80005e8 <auto_run+0xfc>
					countdownFirstCoupleLed--;
 800054a:	4b7f      	ldr	r3, [pc, #508]	; (8000748 <auto_run+0x25c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	4a7d      	ldr	r2, [pc, #500]	; (8000748 <auto_run+0x25c>)
 8000552:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 8000554:	4b7c      	ldr	r3, [pc, #496]	; (8000748 <auto_run+0x25c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d106      	bne.n	800056a <auto_run+0x7e>
						countdownFirstCoupleLed = greenDelay;
 800055c:	4b7b      	ldr	r3, [pc, #492]	; (800074c <auto_run+0x260>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a79      	ldr	r2, [pc, #484]	; (8000748 <auto_run+0x25c>)
 8000562:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = GREEN;
 8000564:	4b76      	ldr	r3, [pc, #472]	; (8000740 <auto_run+0x254>)
 8000566:	2202      	movs	r2, #2
 8000568:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 800056a:	2164      	movs	r1, #100	; 0x64
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fccb 	bl	8000f08 <setTimer>
				}
				break;
 8000572:	e039      	b.n	80005e8 <auto_run+0xfc>
			case GREEN:
				displayFirstLedCouple(GREEN);
 8000574:	2002      	movs	r0, #2
 8000576:	f7ff fec1 	bl	80002fc <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 800057a:	4b72      	ldr	r3, [pc, #456]	; (8000744 <auto_run+0x258>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d134      	bne.n	80005ec <auto_run+0x100>
					countdownFirstCoupleLed--;
 8000582:	4b71      	ldr	r3, [pc, #452]	; (8000748 <auto_run+0x25c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a6f      	ldr	r2, [pc, #444]	; (8000748 <auto_run+0x25c>)
 800058a:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 800058c:	4b6e      	ldr	r3, [pc, #440]	; (8000748 <auto_run+0x25c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d106      	bne.n	80005a2 <auto_run+0xb6>
						countdownFirstCoupleLed = yellowDelay;
 8000594:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <auto_run+0x264>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a6b      	ldr	r2, [pc, #428]	; (8000748 <auto_run+0x25c>)
 800059a:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = YELLOW;
 800059c:	4b68      	ldr	r3, [pc, #416]	; (8000740 <auto_run+0x254>)
 800059e:	2203      	movs	r2, #3
 80005a0:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 80005a2:	2164      	movs	r1, #100	; 0x64
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fcaf 	bl	8000f08 <setTimer>
				}
				break;
 80005aa:	e01f      	b.n	80005ec <auto_run+0x100>
			case YELLOW:
				displayFirstLedCouple(YELLOW);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f7ff fea5 	bl	80002fc <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 80005b2:	4b64      	ldr	r3, [pc, #400]	; (8000744 <auto_run+0x258>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d11a      	bne.n	80005f0 <auto_run+0x104>
					countdownFirstCoupleLed--;
 80005ba:	4b63      	ldr	r3, [pc, #396]	; (8000748 <auto_run+0x25c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a61      	ldr	r2, [pc, #388]	; (8000748 <auto_run+0x25c>)
 80005c2:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 80005c4:	4b60      	ldr	r3, [pc, #384]	; (8000748 <auto_run+0x25c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d106      	bne.n	80005da <auto_run+0xee>
						countdownFirstCoupleLed = redDelay;
 80005cc:	4b61      	ldr	r3, [pc, #388]	; (8000754 <auto_run+0x268>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a5d      	ldr	r2, [pc, #372]	; (8000748 <auto_run+0x25c>)
 80005d2:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = RED;
 80005d4:	4b5a      	ldr	r3, [pc, #360]	; (8000740 <auto_run+0x254>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 80005da:	2164      	movs	r1, #100	; 0x64
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fc93 	bl	8000f08 <setTimer>
				}
				break;
 80005e2:	e005      	b.n	80005f0 <auto_run+0x104>
			default:
				break;
 80005e4:	bf00      	nop
 80005e6:	e004      	b.n	80005f2 <auto_run+0x106>
				break;
 80005e8:	bf00      	nop
 80005ea:	e002      	b.n	80005f2 <auto_run+0x106>
				break;
 80005ec:	bf00      	nop
 80005ee:	e000      	b.n	80005f2 <auto_run+0x106>
				break;
 80005f0:	bf00      	nop
		}
		switch(secondCoupleLedAutoState){
 80005f2:	4b59      	ldr	r3, [pc, #356]	; (8000758 <auto_run+0x26c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d866      	bhi.n	80006c8 <auto_run+0x1dc>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <auto_run+0x114>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000611 	.word	0x08000611
 8000604:	08000621 	.word	0x08000621
 8000608:	08000659 	.word	0x08000659
 800060c:	08000691 	.word	0x08000691
			case LED_INIT:
				secondCoupleLedAutoState = GREEN;
 8000610:	4b51      	ldr	r3, [pc, #324]	; (8000758 <auto_run+0x26c>)
 8000612:	2202      	movs	r2, #2
 8000614:	701a      	strb	r2, [r3, #0]
				setTimer(1, 100);
 8000616:	2164      	movs	r1, #100	; 0x64
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fc75 	bl	8000f08 <setTimer>
				break;
 800061e:	e05a      	b.n	80006d6 <auto_run+0x1ea>
			case RED:
				displaySecondLedCouple(RED);
 8000620:	2001      	movs	r0, #1
 8000622:	f7ff fecb 	bl	80003bc <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 8000626:	4b47      	ldr	r3, [pc, #284]	; (8000744 <auto_run+0x258>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d14e      	bne.n	80006cc <auto_run+0x1e0>
					countdownSecondCoupleLed--;
 800062e:	4b4b      	ldr	r3, [pc, #300]	; (800075c <auto_run+0x270>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a49      	ldr	r2, [pc, #292]	; (800075c <auto_run+0x270>)
 8000636:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000638:	4b48      	ldr	r3, [pc, #288]	; (800075c <auto_run+0x270>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d106      	bne.n	800064e <auto_run+0x162>
						countdownSecondCoupleLed = greenDelay;
 8000640:	4b42      	ldr	r3, [pc, #264]	; (800074c <auto_run+0x260>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a45      	ldr	r2, [pc, #276]	; (800075c <auto_run+0x270>)
 8000646:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = GREEN;
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <auto_run+0x26c>)
 800064a:	2202      	movs	r2, #2
 800064c:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 800064e:	2164      	movs	r1, #100	; 0x64
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fc59 	bl	8000f08 <setTimer>
				}
				break;
 8000656:	e039      	b.n	80006cc <auto_run+0x1e0>
			case GREEN:
				displaySecondLedCouple(GREEN);
 8000658:	2002      	movs	r0, #2
 800065a:	f7ff feaf 	bl	80003bc <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 800065e:	4b39      	ldr	r3, [pc, #228]	; (8000744 <auto_run+0x258>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d134      	bne.n	80006d0 <auto_run+0x1e4>
					countdownSecondCoupleLed--;
 8000666:	4b3d      	ldr	r3, [pc, #244]	; (800075c <auto_run+0x270>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3b01      	subs	r3, #1
 800066c:	4a3b      	ldr	r2, [pc, #236]	; (800075c <auto_run+0x270>)
 800066e:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000670:	4b3a      	ldr	r3, [pc, #232]	; (800075c <auto_run+0x270>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d106      	bne.n	8000686 <auto_run+0x19a>
						countdownSecondCoupleLed = yellowDelay;
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <auto_run+0x264>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a37      	ldr	r2, [pc, #220]	; (800075c <auto_run+0x270>)
 800067e:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = YELLOW;
 8000680:	4b35      	ldr	r3, [pc, #212]	; (8000758 <auto_run+0x26c>)
 8000682:	2203      	movs	r2, #3
 8000684:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 8000686:	2164      	movs	r1, #100	; 0x64
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fc3d 	bl	8000f08 <setTimer>
				}
				break;
 800068e:	e01f      	b.n	80006d0 <auto_run+0x1e4>
			case YELLOW:
				displaySecondLedCouple(YELLOW);
 8000690:	2003      	movs	r0, #3
 8000692:	f7ff fe93 	bl	80003bc <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <auto_run+0x258>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d11a      	bne.n	80006d4 <auto_run+0x1e8>
					countdownSecondCoupleLed--;
 800069e:	4b2f      	ldr	r3, [pc, #188]	; (800075c <auto_run+0x270>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <auto_run+0x270>)
 80006a6:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <auto_run+0x270>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d106      	bne.n	80006be <auto_run+0x1d2>
						countdownSecondCoupleLed = redDelay;
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <auto_run+0x268>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a29      	ldr	r2, [pc, #164]	; (800075c <auto_run+0x270>)
 80006b6:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = RED;
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <auto_run+0x26c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 80006be:	2164      	movs	r1, #100	; 0x64
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fc21 	bl	8000f08 <setTimer>
				}
				break;
 80006c6:	e005      	b.n	80006d4 <auto_run+0x1e8>
			default:
				break;
 80006c8:	bf00      	nop
 80006ca:	e004      	b.n	80006d6 <auto_run+0x1ea>
				break;
 80006cc:	bf00      	nop
 80006ce:	e002      	b.n	80006d6 <auto_run+0x1ea>
				break;
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <auto_run+0x1ea>
				break;
 80006d4:	bf00      	nop
		}

		switch(seg7AutoState){
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <auto_run+0x274>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d01a      	beq.n	8000714 <auto_run+0x228>
 80006de:	2b02      	cmp	r3, #2
 80006e0:	dc24      	bgt.n	800072c <auto_run+0x240>
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <auto_run+0x200>
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d008      	beq.n	80006fc <auto_run+0x210>
					seg7AutoState = FIRST;
					setTimer(2, 50);
				}
				break;
			default:
				break;
 80006ea:	e01f      	b.n	800072c <auto_run+0x240>
				seg7AutoState = FIRST;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <auto_run+0x274>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
				setTimer(2, 1);
 80006f2:	2101      	movs	r1, #1
 80006f4:	2002      	movs	r0, #2
 80006f6:	f000 fc07 	bl	8000f08 <setTimer>
				break;
 80006fa:	e01c      	b.n	8000736 <auto_run+0x24a>
				if(timer_flag[2] == 1){
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <auto_run+0x258>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d115      	bne.n	8000730 <auto_run+0x244>
					seg7AutoState = SECOND;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <auto_run+0x274>)
 8000706:	2202      	movs	r2, #2
 8000708:	701a      	strb	r2, [r3, #0]
					setTimer(2, 50);
 800070a:	2132      	movs	r1, #50	; 0x32
 800070c:	2002      	movs	r0, #2
 800070e:	f000 fbfb 	bl	8000f08 <setTimer>
				break;
 8000712:	e00d      	b.n	8000730 <auto_run+0x244>
				if(timer_flag[2] == 1){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <auto_run+0x258>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d10b      	bne.n	8000734 <auto_run+0x248>
					seg7AutoState = FIRST;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <auto_run+0x274>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
					setTimer(2, 50);
 8000722:	2132      	movs	r1, #50	; 0x32
 8000724:	2002      	movs	r0, #2
 8000726:	f000 fbef 	bl	8000f08 <setTimer>
				break;
 800072a:	e003      	b.n	8000734 <auto_run+0x248>
				break;
 800072c:	bf00      	nop
 800072e:	e002      	b.n	8000736 <auto_run+0x24a>
				break;
 8000730:	bf00      	nop
 8000732:	e000      	b.n	8000736 <auto_run+0x24a>
				break;
 8000734:	bf00      	nop
		}
	}
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000080 	.word	0x20000080
 8000740:	2000008a 	.word	0x2000008a
 8000744:	20000108 	.word	0x20000108
 8000748:	20000090 	.word	0x20000090
 800074c:	20000044 	.word	0x20000044
 8000750:	20000048 	.word	0x20000048
 8000754:	20000040 	.word	0x20000040
 8000758:	2000008b 	.word	0x2000008b
 800075c:	20000094 	.word	0x20000094
 8000760:	2000008c 	.word	0x2000008c

08000764 <mode2_run>:
 *      Author: ad
 */

#include "fsm_manual.h"

void mode2_run(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	switch(mode2Toggle){
 8000768:	4b49      	ldr	r3, [pc, #292]	; (8000890 <mode2_run+0x12c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <mode2_run+0x12>
 8000770:	2b01      	cmp	r3, #1
 8000772:	d00e      	beq.n	8000792 <mode2_run+0x2e>
				toggleLeds(RED);
				setTimer(3, 25);
			}
			break;
		default:
			break;
 8000774:	e019      	b.n	80007aa <mode2_run+0x46>
			HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000776:	2201      	movs	r2, #1
 8000778:	f641 4113 	movw	r1, #7187	; 0x1c13
 800077c:	4845      	ldr	r0, [pc, #276]	; (8000894 <mode2_run+0x130>)
 800077e:	f000 ffb2 	bl	80016e6 <HAL_GPIO_WritePin>
			mode2Toggle = TOGGLE;
 8000782:	4b43      	ldr	r3, [pc, #268]	; (8000890 <mode2_run+0x12c>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
			setTimer(3, 25);
 8000788:	2119      	movs	r1, #25
 800078a:	2003      	movs	r0, #3
 800078c:	f000 fbbc 	bl	8000f08 <setTimer>
			break;
 8000790:	e00b      	b.n	80007aa <mode2_run+0x46>
			if(timer_flag[3] == 1){
 8000792:	4b41      	ldr	r3, [pc, #260]	; (8000898 <mode2_run+0x134>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d106      	bne.n	80007a8 <mode2_run+0x44>
				toggleLeds(RED);
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fe72 	bl	8000484 <toggleLeds>
				setTimer(3, 25);
 80007a0:	2119      	movs	r1, #25
 80007a2:	2003      	movs	r0, #3
 80007a4:	f000 fbb0 	bl	8000f08 <setTimer>
			break;
 80007a8:	bf00      	nop
	}

	switch(mode2Increase){
 80007aa:	4b3c      	ldr	r3, [pc, #240]	; (800089c <mode2_run+0x138>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <mode2_run+0x54>
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d014      	beq.n	80007e0 <mode2_run+0x7c>
					setValues();
				}
				break;

			default:
				break;
 80007b6:	e039      	b.n	800082c <mode2_run+0xc8>
				if (isButtonPressed(1)==1){
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff fcc7 	bl	800014c <isButtonPressed>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d130      	bne.n	8000826 <mode2_run+0xc2>
					mode2Increase = INCREASE;
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <mode2_run+0x138>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
					redDelay +=1;
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <mode2_run+0x13c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <mode2_run+0x13c>)
 80007d2:	6013      	str	r3, [r2, #0]
					greenDelay +=1;
 80007d4:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <mode2_run+0x140>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <mode2_run+0x140>)
 80007dc:	6013      	str	r3, [r2, #0]
				break;
 80007de:	e022      	b.n	8000826 <mode2_run+0xc2>
				if (isButtonPressed(1)==1){
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fcb3 	bl	800014c <isButtonPressed>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d110      	bne.n	800080e <mode2_run+0xaa>
					redDelay +=1;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <mode2_run+0x13c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <mode2_run+0x13c>)
 80007f4:	6013      	str	r3, [r2, #0]
					greenDelay +=1;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <mode2_run+0x140>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <mode2_run+0x140>)
 80007fe:	6013      	str	r3, [r2, #0]
					if(redDelay >= 99) redDelay = 1;
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <mode2_run+0x13c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b62      	cmp	r3, #98	; 0x62
 8000806:	dd02      	ble.n	800080e <mode2_run+0xaa>
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <mode2_run+0x13c>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 800080e:	2002      	movs	r0, #2
 8000810:	f7ff fc9c 	bl	800014c <isButtonPressed>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d107      	bne.n	800082a <mode2_run+0xc6>
					MODE = MODE1;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <mode2_run+0x144>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
					setValues();
 8000820:	f000 f9d0 	bl	8000bc4 <setValues>
				break;
 8000824:	e001      	b.n	800082a <mode2_run+0xc6>
				break;
 8000826:	bf00      	nop
 8000828:	e000      	b.n	800082c <mode2_run+0xc8>
				break;
 800082a:	bf00      	nop
		}

	switch(mode2Seg){
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <mode2_run+0x148>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d01a      	beq.n	800086a <mode2_run+0x106>
 8000834:	2b02      	cmp	r3, #2
 8000836:	dc24      	bgt.n	8000882 <mode2_run+0x11e>
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <mode2_run+0xde>
 800083c:	2b01      	cmp	r3, #1
 800083e:	d008      	beq.n	8000852 <mode2_run+0xee>
				setTimer(4, 25);
				mode2Seg = FIRST;
			}
			break;
		default:
			break;
 8000840:	e01f      	b.n	8000882 <mode2_run+0x11e>
			mode2Seg = FIRST;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <mode2_run+0x148>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
			setTimer(4, 25);
 8000848:	2119      	movs	r1, #25
 800084a:	2004      	movs	r0, #4
 800084c:	f000 fb5c 	bl	8000f08 <setTimer>
			break;
 8000850:	e01c      	b.n	800088c <mode2_run+0x128>
			if(timer_flag[4] == 1){
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <mode2_run+0x134>)
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d115      	bne.n	8000886 <mode2_run+0x122>
				mode2Seg = SECOND;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <mode2_run+0x148>)
 800085c:	2202      	movs	r2, #2
 800085e:	701a      	strb	r2, [r3, #0]
				setTimer(4, 25);
 8000860:	2119      	movs	r1, #25
 8000862:	2004      	movs	r0, #4
 8000864:	f000 fb50 	bl	8000f08 <setTimer>
			break;
 8000868:	e00d      	b.n	8000886 <mode2_run+0x122>
			if(timer_flag[4] == 1){
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <mode2_run+0x134>)
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d10b      	bne.n	800088a <mode2_run+0x126>
				setTimer(4, 25);
 8000872:	2119      	movs	r1, #25
 8000874:	2004      	movs	r0, #4
 8000876:	f000 fb47 	bl	8000f08 <setTimer>
				mode2Seg = FIRST;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <mode2_run+0x148>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
			break;
 8000880:	e003      	b.n	800088a <mode2_run+0x126>
			break;
 8000882:	bf00      	nop
 8000884:	e002      	b.n	800088c <mode2_run+0x128>
			break;
 8000886:	bf00      	nop
 8000888:	e000      	b.n	800088c <mode2_run+0x128>
			break;
 800088a:	bf00      	nop
	}
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000081 	.word	0x20000081
 8000894:	40010800 	.word	0x40010800
 8000898:	20000108 	.word	0x20000108
 800089c:	20000083 	.word	0x20000083
 80008a0:	20000040 	.word	0x20000040
 80008a4:	20000044 	.word	0x20000044
 80008a8:	20000080 	.word	0x20000080
 80008ac:	20000082 	.word	0x20000082

080008b0 <mode3_run>:

void mode3_run(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	switch(mode3Toggle){
 80008b4:	4b49      	ldr	r3, [pc, #292]	; (80009dc <mode3_run+0x12c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <mode3_run+0x12>
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d00e      	beq.n	80008de <mode3_run+0x2e>
				toggleLeds(YELLOW);
				setTimer(5, 25);
			}
			break;
		default:
			break;
 80008c0:	e019      	b.n	80008f6 <mode3_run+0x46>
			HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80008c2:	2201      	movs	r2, #1
 80008c4:	f641 4113 	movw	r1, #7187	; 0x1c13
 80008c8:	4845      	ldr	r0, [pc, #276]	; (80009e0 <mode3_run+0x130>)
 80008ca:	f000 ff0c 	bl	80016e6 <HAL_GPIO_WritePin>
			mode3Toggle = TOGGLE;
 80008ce:	4b43      	ldr	r3, [pc, #268]	; (80009dc <mode3_run+0x12c>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
			setTimer(5, 25);
 80008d4:	2119      	movs	r1, #25
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 fb16 	bl	8000f08 <setTimer>
			break;
 80008dc:	e00b      	b.n	80008f6 <mode3_run+0x46>
			if(timer_flag[5] == 1){
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <mode3_run+0x134>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d106      	bne.n	80008f4 <mode3_run+0x44>
				toggleLeds(YELLOW);
 80008e6:	2003      	movs	r0, #3
 80008e8:	f7ff fdcc 	bl	8000484 <toggleLeds>
				setTimer(5, 25);
 80008ec:	2119      	movs	r1, #25
 80008ee:	2005      	movs	r0, #5
 80008f0:	f000 fb0a 	bl	8000f08 <setTimer>
			break;
 80008f4:	bf00      	nop
	}

	switch(mode3Increase){
 80008f6:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <mode3_run+0x138>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <mode3_run+0x54>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d014      	beq.n	800092c <mode3_run+0x7c>
					setValues();
				}
				break;

			default:
				break;
 8000902:	e039      	b.n	8000978 <mode3_run+0xc8>
				if (isButtonPressed(1)==1){
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fc21 	bl	800014c <isButtonPressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d130      	bne.n	8000972 <mode3_run+0xc2>
					mode3Increase = INCREASE;
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <mode3_run+0x138>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
					yellowDelay +=1;
 8000916:	4b35      	ldr	r3, [pc, #212]	; (80009ec <mode3_run+0x13c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a33      	ldr	r2, [pc, #204]	; (80009ec <mode3_run+0x13c>)
 800091e:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <mode3_run+0x140>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <mode3_run+0x140>)
 8000928:	6013      	str	r3, [r2, #0]
				break;
 800092a:	e022      	b.n	8000972 <mode3_run+0xc2>
				if (isButtonPressed(1)==1){
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff fc0d 	bl	800014c <isButtonPressed>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d110      	bne.n	800095a <mode3_run+0xaa>
					yellowDelay +=1;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <mode3_run+0x13c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <mode3_run+0x13c>)
 8000940:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <mode3_run+0x140>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <mode3_run+0x140>)
 800094a:	6013      	str	r3, [r2, #0]
					if(yellowDelay >= 99) yellowDelay = 1;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <mode3_run+0x13c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b62      	cmp	r3, #98	; 0x62
 8000952:	dd02      	ble.n	800095a <mode3_run+0xaa>
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <mode3_run+0x13c>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff fbf6 	bl	800014c <isButtonPressed>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d107      	bne.n	8000976 <mode3_run+0xc6>
					MODE = MODE1;
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <mode3_run+0x144>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
					setValues();
 800096c:	f000 f92a 	bl	8000bc4 <setValues>
				break;
 8000970:	e001      	b.n	8000976 <mode3_run+0xc6>
				break;
 8000972:	bf00      	nop
 8000974:	e000      	b.n	8000978 <mode3_run+0xc8>
				break;
 8000976:	bf00      	nop
		}

	switch(mode3Seg){
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <mode3_run+0x148>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d01a      	beq.n	80009b6 <mode3_run+0x106>
 8000980:	2b02      	cmp	r3, #2
 8000982:	dc24      	bgt.n	80009ce <mode3_run+0x11e>
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <mode3_run+0xde>
 8000988:	2b01      	cmp	r3, #1
 800098a:	d008      	beq.n	800099e <mode3_run+0xee>
				setTimer(6, 25);
				mode3Seg = FIRST;
			}
			break;
		default:
			break;
 800098c:	e01f      	b.n	80009ce <mode3_run+0x11e>
			mode3Seg = FIRST;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <mode3_run+0x148>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
			setTimer(6, 25);
 8000994:	2119      	movs	r1, #25
 8000996:	2006      	movs	r0, #6
 8000998:	f000 fab6 	bl	8000f08 <setTimer>
			break;
 800099c:	e01c      	b.n	80009d8 <mode3_run+0x128>
			if(timer_flag[6] == 1){
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <mode3_run+0x134>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d115      	bne.n	80009d2 <mode3_run+0x122>
				mode3Seg = SECOND;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <mode3_run+0x148>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	701a      	strb	r2, [r3, #0]
				setTimer(6, 25);
 80009ac:	2119      	movs	r1, #25
 80009ae:	2006      	movs	r0, #6
 80009b0:	f000 faaa 	bl	8000f08 <setTimer>
			break;
 80009b4:	e00d      	b.n	80009d2 <mode3_run+0x122>
			if(timer_flag[6] == 1){
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <mode3_run+0x134>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10b      	bne.n	80009d6 <mode3_run+0x126>
				setTimer(6, 25);
 80009be:	2119      	movs	r1, #25
 80009c0:	2006      	movs	r0, #6
 80009c2:	f000 faa1 	bl	8000f08 <setTimer>
				mode3Seg = FIRST;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <mode3_run+0x148>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
			break;
 80009cc:	e003      	b.n	80009d6 <mode3_run+0x126>
			break;
 80009ce:	bf00      	nop
 80009d0:	e002      	b.n	80009d8 <mode3_run+0x128>
			break;
 80009d2:	bf00      	nop
 80009d4:	e000      	b.n	80009d8 <mode3_run+0x128>
			break;
 80009d6:	bf00      	nop
	}
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000084 	.word	0x20000084
 80009e0:	40010800 	.word	0x40010800
 80009e4:	20000108 	.word	0x20000108
 80009e8:	20000086 	.word	0x20000086
 80009ec:	20000048 	.word	0x20000048
 80009f0:	20000040 	.word	0x20000040
 80009f4:	20000080 	.word	0x20000080
 80009f8:	20000085 	.word	0x20000085

080009fc <mode4_run>:

void mode4_run(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	switch(mode4Toggle){
 8000a00:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <mode4_run+0x12c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <mode4_run+0x12>
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d00e      	beq.n	8000a2a <mode4_run+0x2e>
				toggleLeds(GREEN);
				setTimer(7, 25);
			}
			break;
		default:
			break;
 8000a0c:	e019      	b.n	8000a42 <mode4_run+0x46>
			HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f641 4113 	movw	r1, #7187	; 0x1c13
 8000a14:	4845      	ldr	r0, [pc, #276]	; (8000b2c <mode4_run+0x130>)
 8000a16:	f000 fe66 	bl	80016e6 <HAL_GPIO_WritePin>
			mode4Toggle = TOGGLE;
 8000a1a:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <mode4_run+0x12c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
			setTimer(7, 25);
 8000a20:	2119      	movs	r1, #25
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 fa70 	bl	8000f08 <setTimer>
			break;
 8000a28:	e00b      	b.n	8000a42 <mode4_run+0x46>
			if(timer_flag[7] == 1){
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <mode4_run+0x134>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d106      	bne.n	8000a40 <mode4_run+0x44>
				toggleLeds(GREEN);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fd26 	bl	8000484 <toggleLeds>
				setTimer(7, 25);
 8000a38:	2119      	movs	r1, #25
 8000a3a:	2007      	movs	r0, #7
 8000a3c:	f000 fa64 	bl	8000f08 <setTimer>
			break;
 8000a40:	bf00      	nop
	}

	switch(mode4Increase){
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <mode4_run+0x138>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <mode4_run+0x54>
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d014      	beq.n	8000a78 <mode4_run+0x7c>
					setValues();
				}
				break;

			default:
				break;
 8000a4e:	e039      	b.n	8000ac4 <mode4_run+0xc8>
				if (isButtonPressed(1)==1){
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fb7b 	bl	800014c <isButtonPressed>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d130      	bne.n	8000abe <mode4_run+0xc2>
					mode4Increase = INCREASE;
 8000a5c:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <mode4_run+0x138>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
					greenDelay +=1;
 8000a62:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <mode4_run+0x13c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a33      	ldr	r2, [pc, #204]	; (8000b38 <mode4_run+0x13c>)
 8000a6a:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000a6c:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <mode4_run+0x140>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a32      	ldr	r2, [pc, #200]	; (8000b3c <mode4_run+0x140>)
 8000a74:	6013      	str	r3, [r2, #0]
				break;
 8000a76:	e022      	b.n	8000abe <mode4_run+0xc2>
				if (isButtonPressed(1)==1){
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fb67 	bl	800014c <isButtonPressed>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d110      	bne.n	8000aa6 <mode4_run+0xaa>
					greenDelay +=1;
 8000a84:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <mode4_run+0x13c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <mode4_run+0x13c>)
 8000a8c:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <mode4_run+0x140>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a29      	ldr	r2, [pc, #164]	; (8000b3c <mode4_run+0x140>)
 8000a96:	6013      	str	r3, [r2, #0]
					if(greenDelay >= 99) greenDelay = 1;
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <mode4_run+0x13c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b62      	cmp	r3, #98	; 0x62
 8000a9e:	dd02      	ble.n	8000aa6 <mode4_run+0xaa>
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <mode4_run+0x13c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff fb50 	bl	800014c <isButtonPressed>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d107      	bne.n	8000ac2 <mode4_run+0xc6>
					MODE = MODE1;
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <mode4_run+0x144>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
					setValues();
 8000ab8:	f000 f884 	bl	8000bc4 <setValues>
				break;
 8000abc:	e001      	b.n	8000ac2 <mode4_run+0xc6>
				break;
 8000abe:	bf00      	nop
 8000ac0:	e000      	b.n	8000ac4 <mode4_run+0xc8>
				break;
 8000ac2:	bf00      	nop
		}

	switch(mode4Seg){
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <mode4_run+0x148>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d01a      	beq.n	8000b02 <mode4_run+0x106>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	dc24      	bgt.n	8000b1a <mode4_run+0x11e>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <mode4_run+0xde>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d008      	beq.n	8000aea <mode4_run+0xee>
				setTimer(8, 25);
				mode4Seg = FIRST;
			}
			break;
		default:
			break;
 8000ad8:	e01f      	b.n	8000b1a <mode4_run+0x11e>
			mode4Seg = FIRST;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <mode4_run+0x148>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
			setTimer(8, 25);
 8000ae0:	2119      	movs	r1, #25
 8000ae2:	2008      	movs	r0, #8
 8000ae4:	f000 fa10 	bl	8000f08 <setTimer>
			break;
 8000ae8:	e01c      	b.n	8000b24 <mode4_run+0x128>
			if(timer_flag[8] == 1){
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <mode4_run+0x134>)
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d115      	bne.n	8000b1e <mode4_run+0x122>
				mode4Seg = SECOND;
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <mode4_run+0x148>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	701a      	strb	r2, [r3, #0]
				setTimer(8, 25);
 8000af8:	2119      	movs	r1, #25
 8000afa:	2008      	movs	r0, #8
 8000afc:	f000 fa04 	bl	8000f08 <setTimer>
			break;
 8000b00:	e00d      	b.n	8000b1e <mode4_run+0x122>
			if(timer_flag[8] == 1){
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <mode4_run+0x134>)
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <mode4_run+0x126>
				setTimer(8, 25);
 8000b0a:	2119      	movs	r1, #25
 8000b0c:	2008      	movs	r0, #8
 8000b0e:	f000 f9fb 	bl	8000f08 <setTimer>
				mode4Seg = FIRST;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <mode4_run+0x148>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
			break;
 8000b18:	e003      	b.n	8000b22 <mode4_run+0x126>
			break;
 8000b1a:	bf00      	nop
 8000b1c:	e002      	b.n	8000b24 <mode4_run+0x128>
			break;
 8000b1e:	bf00      	nop
 8000b20:	e000      	b.n	8000b24 <mode4_run+0x128>
			break;
 8000b22:	bf00      	nop
	}
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000087 	.word	0x20000087
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	20000108 	.word	0x20000108
 8000b34:	20000089 	.word	0x20000089
 8000b38:	20000044 	.word	0x20000044
 8000b3c:	20000040 	.word	0x20000040
 8000b40:	20000080 	.word	0x20000080
 8000b44:	20000088 	.word	0x20000088

08000b48 <manual_run>:

void manual_run(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	switch(MODE){
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <manual_run+0x78>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d01e      	beq.n	8000b92 <manual_run+0x4a>
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	dc2a      	bgt.n	8000bae <manual_run+0x66>
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d002      	beq.n	8000b62 <manual_run+0x1a>
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d00c      	beq.n	8000b7a <manual_run+0x32>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 8000b60:	e025      	b.n	8000bae <manual_run+0x66>
			mode2_run();
 8000b62:	f7ff fdff 	bl	8000764 <mode2_run>
			if (isButtonPressed(0) == 1){
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff faf0 	bl	800014c <isButtonPressed>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d11f      	bne.n	8000bb2 <manual_run+0x6a>
				MODE = MODE3;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <manual_run+0x78>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	701a      	strb	r2, [r3, #0]
			break;
 8000b78:	e01b      	b.n	8000bb2 <manual_run+0x6a>
			mode3_run();
 8000b7a:	f7ff fe99 	bl	80008b0 <mode3_run>
			if (isButtonPressed(0) == 1){
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff fae4 	bl	800014c <isButtonPressed>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d115      	bne.n	8000bb6 <manual_run+0x6e>
				MODE = MODE4;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <manual_run+0x78>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	701a      	strb	r2, [r3, #0]
			break;
 8000b90:	e011      	b.n	8000bb6 <manual_run+0x6e>
			mode4_run();
 8000b92:	f7ff ff33 	bl	80009fc <mode4_run>
			if (isButtonPressed(0) == 1){
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fad8 	bl	800014c <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d10b      	bne.n	8000bba <manual_run+0x72>
				MODE = MODE1;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <manual_run+0x78>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
				setValues();
 8000ba8:	f000 f80c 	bl	8000bc4 <setValues>
			break;
 8000bac:	e005      	b.n	8000bba <manual_run+0x72>
			break;
 8000bae:	bf00      	nop
 8000bb0:	e004      	b.n	8000bbc <manual_run+0x74>
			break;
 8000bb2:	bf00      	nop
 8000bb4:	e002      	b.n	8000bbc <manual_run+0x74>
			break;
 8000bb6:	bf00      	nop
 8000bb8:	e000      	b.n	8000bbc <manual_run+0x74>
			break;
 8000bba:	bf00      	nop
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000080 	.word	0x20000080

08000bc4 <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <setValues+0x6c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <setValues+0x70>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <setValues+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <setValues+0x78>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <setValues+0x7c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <setValues+0x80>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <setValues+0x84>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <setValues+0x88>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <setValues+0x8c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <setValues+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <setValues+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <setValues+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <setValues+0x9c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <setValues+0xa0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <setValues+0xa4>)
 8000c1c:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <setValues+0xa8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <setValues+0xac>)
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000080 	.word	0x20000080
 8000c34:	20000081 	.word	0x20000081
 8000c38:	20000082 	.word	0x20000082
 8000c3c:	20000083 	.word	0x20000083
 8000c40:	20000084 	.word	0x20000084
 8000c44:	20000085 	.word	0x20000085
 8000c48:	20000086 	.word	0x20000086
 8000c4c:	20000087 	.word	0x20000087
 8000c50:	20000088 	.word	0x20000088
 8000c54:	20000089 	.word	0x20000089
 8000c58:	2000008a 	.word	0x2000008a
 8000c5c:	2000008b 	.word	0x2000008b
 8000c60:	2000008c 	.word	0x2000008c
 8000c64:	20000040 	.word	0x20000040
 8000c68:	20000090 	.word	0x20000090
 8000c6c:	20000044 	.word	0x20000044
 8000c70:	20000094 	.word	0x20000094

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c78:	f000 fa2a 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7c:	f000 f814 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c80:	f000 f89a 	bl	8000db8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c84:	f000 f84c 	bl	8000d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <main+0x30>)
 8000c8a:	f001 f98b 	bl	8001fa4 <HAL_TIM_Base_Start_IT>
  setValues();
 8000c8e:	f7ff ff99 	bl	8000bc4 <setValues>
  displayFirstLedCouple(LED_INIT);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fb32 	bl	80002fc <displayFirstLedCouple>
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //A3
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0); //I2C
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //D9-D10
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //LED2
//	  HAL_Delay(1000);
	  auto_run();
 8000c98:	f7ff fc28 	bl	80004ec <auto_run>
	  manual_run();
 8000c9c:	f7ff ff54 	bl	8000b48 <manual_run>
	  auto_run();
 8000ca0:	e7fa      	b.n	8000c98 <main+0x24>
 8000ca2:	bf00      	nop
 8000ca4:	20000098 	.word	0x20000098

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fd22 	bl	8002700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fd32 	bl	8001748 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cea:	f000 f908 	bl	8000efe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 ffa0 	bl	8001c4c <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f8f4 	bl	8000efe <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3740      	adds	r7, #64	; 0x40
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d46:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d54:	220a      	movs	r2, #10
 8000d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d66:	f001 f8cd 	bl	8001f04 <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d70:	f000 f8c5 	bl	8000efe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d82:	f001 fa69 	bl	8002258 <HAL_TIM_ConfigClockSource>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f000 f8b7 	bl	8000efe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d9e:	f001 fc3f 	bl	8002620 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f000 f8a9 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000098 	.word	0x20000098

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a2e      	ldr	r2, [pc, #184]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a28      	ldr	r2, [pc, #160]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_GPIO_Init+0xec>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f240 2101 	movw	r1, #513	; 0x201
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <MX_GPIO_Init+0xf0>)
 8000e1c:	f000 fc63 	bl	80016e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN2_Pin|LED1_Pin
 8000e20:	2200      	movs	r2, #0
 8000e22:	f641 5133 	movw	r1, #7475	; 0x1d33
 8000e26:	4821      	ldr	r0, [pc, #132]	; (8000eac <MX_GPIO_Init+0xf4>)
 8000e28:	f000 fc5d 	bl	80016e6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GREEN1_Pin|RED2_Pin|YELLOW2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin;
 8000e2c:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <MX_GPIO_Init+0xf0>)
 8000e42:	f000 fab5 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 8000e46:	f240 2301 	movw	r3, #513	; 0x201
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <MX_GPIO_Init+0xf0>)
 8000e60:	f000 faa6 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN2_Pin LED1_Pin
                           PA8 GREEN1_Pin RED2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN2_Pin|LED1_Pin
 8000e64:	f641 5333 	movw	r3, #7475	; 0x1d33
 8000e68:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GREEN1_Pin|RED2_Pin|YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <MX_GPIO_Init+0xf4>)
 8000e7e:	f000 fa97 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8000e82:	2301      	movs	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <MX_GPIO_Init+0xf8>)
 8000e96:	f000 fa8b 	bl	80013b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40011000 	.word	0x40011000
 8000eac:	40010800 	.word	0x40010800
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000ebc:	f7ff f974 	bl	80001a8 <getKeyInput>
	timerRun(0);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f000 f839 	bl	8000f38 <timerRun>
	timerRun(1);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f000 f836 	bl	8000f38 <timerRun>
	timerRun(2);
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f000 f833 	bl	8000f38 <timerRun>
	timerRun(3);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f830 	bl	8000f38 <timerRun>
	timerRun(4);
 8000ed8:	2004      	movs	r0, #4
 8000eda:	f000 f82d 	bl	8000f38 <timerRun>
	timerRun(5);
 8000ede:	2005      	movs	r0, #5
 8000ee0:	f000 f82a 	bl	8000f38 <timerRun>
	timerRun(6);
 8000ee4:	2006      	movs	r0, #6
 8000ee6:	f000 f827 	bl	8000f38 <timerRun>
	timerRun(7);
 8000eea:	2007      	movs	r0, #7
 8000eec:	f000 f824 	bl	8000f38 <timerRun>
	timerRun(8);
 8000ef0:	2008      	movs	r0, #8
 8000ef2:	f000 f821 	bl	8000f38 <timerRun>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f02:	b672      	cpsid	i
}
 8000f04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <Error_Handler+0x8>

08000f08 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int timer_ID, int duration){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	timer_counter[timer_ID] = duration;
 8000f12:	4907      	ldr	r1, [pc, #28]	; (8000f30 <setTimer+0x28>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer_ID] = 0;
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <setTimer+0x2c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2100      	movs	r1, #0
 8000f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	200000e0 	.word	0x200000e0
 8000f34:	20000108 	.word	0x20000108

08000f38 <timerRun>:
void timerRun(int timer_ID){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if(timer_counter[timer_ID] > 0){
 8000f40:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <timerRun+0x48>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	dd13      	ble.n	8000f74 <timerRun+0x3c>
		timer_counter[timer_ID]--;
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <timerRun+0x48>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	1e5a      	subs	r2, r3, #1
 8000f56:	490a      	ldr	r1, [pc, #40]	; (8000f80 <timerRun+0x48>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timer_ID] <= 0){
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <timerRun+0x48>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dc04      	bgt.n	8000f74 <timerRun+0x3c>
			timer_flag[timer_ID] = 1;
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <timerRun+0x4c>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200000e0 	.word	0x200000e0
 8000f84:	20000108 	.word	0x20000108

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_MspInit+0x40>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_MspInit+0x40>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_MspInit+0x40>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_MspInit+0x40>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_MspInit+0x40>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_MspInit+0x40>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d113      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f000 f9a1 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001000:	201c      	movs	r0, #28
 8001002:	f000 f9ba 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f87f 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM2_IRQHandler+0x10>)
 800106a:	f000 ffed 	bl	8002048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000098 	.word	0x20000098

08001078 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff fff8 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800108a:	490c      	ldr	r1, [pc, #48]	; (80010bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a0:	4c09      	ldr	r4, [pc, #36]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f001 fb2f 	bl	8002710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fddf 	bl	8000c74 <main>
  bx lr
 80010b6:	4770      	bx	lr
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80010c0:	0800279c 	.word	0x0800279c
  ldr r2, =_sbss
 80010c4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80010c8:	20000134 	.word	0x20000134

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x28>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x28>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f923 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff ff4c 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f93b 	bl	8001396 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f903 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000004c 	.word	0x2000004c
 8001154:	20000054 	.word	0x20000054
 8001158:	20000050 	.word	0x20000050

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <HAL_IncTick+0x20>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000054 	.word	0x20000054
 800117c:	20000130 	.word	0x20000130

08001180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000130 	.word	0x20000130

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4906      	ldr	r1, [pc, #24]	; (800122c <__NVIC_EnableIRQ+0x34>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff90 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff2d 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff42 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff35 	bl	80011f8 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa2 	bl	80012e8 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e169      	b.n	8001698 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c4:	2201      	movs	r2, #1
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8158 	bne.w	8001692 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a9a      	ldr	r2, [pc, #616]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d05e      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 80013ec:	4a98      	ldr	r2, [pc, #608]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d875      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 80013f2:	4a98      	ldr	r2, [pc, #608]	; (8001654 <HAL_GPIO_Init+0x2a4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d058      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 80013f8:	4a96      	ldr	r2, [pc, #600]	; (8001654 <HAL_GPIO_Init+0x2a4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d86f      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 80013fe:	4a96      	ldr	r2, [pc, #600]	; (8001658 <HAL_GPIO_Init+0x2a8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d052      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 8001404:	4a94      	ldr	r2, [pc, #592]	; (8001658 <HAL_GPIO_Init+0x2a8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d869      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 800140a:	4a94      	ldr	r2, [pc, #592]	; (800165c <HAL_GPIO_Init+0x2ac>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d04c      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 8001410:	4a92      	ldr	r2, [pc, #584]	; (800165c <HAL_GPIO_Init+0x2ac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d863      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 8001416:	4a92      	ldr	r2, [pc, #584]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d046      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 800141c:	4a90      	ldr	r2, [pc, #576]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d85d      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 8001422:	2b12      	cmp	r3, #18
 8001424:	d82a      	bhi.n	800147c <HAL_GPIO_Init+0xcc>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d859      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <HAL_GPIO_Init+0x80>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	080014ab 	.word	0x080014ab
 8001434:	08001485 	.word	0x08001485
 8001438:	08001497 	.word	0x08001497
 800143c:	080014d9 	.word	0x080014d9
 8001440:	080014df 	.word	0x080014df
 8001444:	080014df 	.word	0x080014df
 8001448:	080014df 	.word	0x080014df
 800144c:	080014df 	.word	0x080014df
 8001450:	080014df 	.word	0x080014df
 8001454:	080014df 	.word	0x080014df
 8001458:	080014df 	.word	0x080014df
 800145c:	080014df 	.word	0x080014df
 8001460:	080014df 	.word	0x080014df
 8001464:	080014df 	.word	0x080014df
 8001468:	080014df 	.word	0x080014df
 800146c:	080014df 	.word	0x080014df
 8001470:	080014df 	.word	0x080014df
 8001474:	0800148d 	.word	0x0800148d
 8001478:	080014a1 	.word	0x080014a1
 800147c:	4a79      	ldr	r2, [pc, #484]	; (8001664 <HAL_GPIO_Init+0x2b4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001482:	e02c      	b.n	80014de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	623b      	str	r3, [r7, #32]
          break;
 800148a:	e029      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	3304      	adds	r3, #4
 8001492:	623b      	str	r3, [r7, #32]
          break;
 8001494:	e024      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	3308      	adds	r3, #8
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e01f      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	330c      	adds	r3, #12
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e01a      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b2:	2304      	movs	r3, #4
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e013      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c0:	2308      	movs	r3, #8
 80014c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	611a      	str	r2, [r3, #16]
          break;
 80014ca:	e009      	b.n	80014e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014cc:	2308      	movs	r3, #8
 80014ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	615a      	str	r2, [r3, #20]
          break;
 80014d6:	e003      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          break;
 80014de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2bff      	cmp	r3, #255	; 0xff
 80014e4:	d801      	bhi.n	80014ea <HAL_GPIO_Init+0x13a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	e001      	b.n	80014ee <HAL_GPIO_Init+0x13e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3304      	adds	r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2bff      	cmp	r3, #255	; 0xff
 80014f4:	d802      	bhi.n	80014fc <HAL_GPIO_Init+0x14c>
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x152>
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	3b08      	subs	r3, #8
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	210f      	movs	r1, #15
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	6a39      	ldr	r1, [r7, #32]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	431a      	orrs	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80b1 	beq.w	8001692 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001530:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001548:	4a48      	ldr	r2, [pc, #288]	; (800166c <HAL_GPIO_Init+0x2bc>)
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a40      	ldr	r2, [pc, #256]	; (8001670 <HAL_GPIO_Init+0x2c0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d013      	beq.n	800159c <HAL_GPIO_Init+0x1ec>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3f      	ldr	r2, [pc, #252]	; (8001674 <HAL_GPIO_Init+0x2c4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00d      	beq.n	8001598 <HAL_GPIO_Init+0x1e8>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3e      	ldr	r2, [pc, #248]	; (8001678 <HAL_GPIO_Init+0x2c8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d007      	beq.n	8001594 <HAL_GPIO_Init+0x1e4>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3d      	ldr	r2, [pc, #244]	; (800167c <HAL_GPIO_Init+0x2cc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_GPIO_Init+0x1e0>
 800158c:	2303      	movs	r3, #3
 800158e:	e006      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 8001590:	2304      	movs	r3, #4
 8001592:	e004      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 8001594:	2302      	movs	r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 800159c:	2300      	movs	r3, #0
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	f002 0203 	and.w	r2, r2, #3
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	4093      	lsls	r3, r2
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ae:	492f      	ldr	r1, [pc, #188]	; (800166c <HAL_GPIO_Init+0x2bc>)
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	492c      	ldr	r1, [pc, #176]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4928      	ldr	r1, [pc, #160]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	4922      	ldr	r1, [pc, #136]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	43db      	mvns	r3, r3
 8001606:	491e      	ldr	r1, [pc, #120]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001608:	4013      	ands	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4918      	ldr	r1, [pc, #96]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4914      	ldr	r1, [pc, #80]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001630:	4013      	ands	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d021      	beq.n	8001684 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	490e      	ldr	r1, [pc, #56]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
 800164c:	e021      	b.n	8001692 <HAL_GPIO_Init+0x2e2>
 800164e:	bf00      	nop
 8001650:	10320000 	.word	0x10320000
 8001654:	10310000 	.word	0x10310000
 8001658:	10220000 	.word	0x10220000
 800165c:	10210000 	.word	0x10210000
 8001660:	10120000 	.word	0x10120000
 8001664:	10110000 	.word	0x10110000
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40011000 	.word	0x40011000
 800167c:	40011400 	.word	0x40011400
 8001680:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_GPIO_Init+0x304>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	43db      	mvns	r3, r3
 800168c:	4909      	ldr	r1, [pc, #36]	; (80016b4 <HAL_GPIO_Init+0x304>)
 800168e:	4013      	ands	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f47f ae8e 	bne.w	80013c4 <HAL_GPIO_Init+0x14>
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	372c      	adds	r7, #44	; 0x2c
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	807b      	strh	r3, [r7, #2]
 80016f2:	4613      	mov	r3, r2
 80016f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f6:	787b      	ldrb	r3, [r7, #1]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fc:	887a      	ldrh	r2, [r7, #2]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001702:	e003      	b.n	800170c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	041a      	lsls	r2, r3, #16
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	611a      	str	r2, [r3, #16]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001728:	887a      	ldrh	r2, [r7, #2]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	041a      	lsls	r2, r3, #16
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43d9      	mvns	r1, r3
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	400b      	ands	r3, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e272      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8087 	beq.w	8001876 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001768:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b04      	cmp	r3, #4
 8001772:	d00c      	beq.n	800178e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001774:	4b8f      	ldr	r3, [pc, #572]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d112      	bne.n	80017a6 <HAL_RCC_OscConfig+0x5e>
 8001780:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d10b      	bne.n	80017a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178e:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d06c      	beq.n	8001874 <HAL_RCC_OscConfig+0x12c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d168      	bne.n	8001874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e24c      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x76>
 80017b0:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a7f      	ldr	r2, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e02e      	b.n	800181c <HAL_RCC_OscConfig+0xd4>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x98>
 80017c6:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7a      	ldr	r2, [pc, #488]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a77      	ldr	r2, [pc, #476]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e01d      	b.n	800181c <HAL_RCC_OscConfig+0xd4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0xbc>
 80017ea:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a71      	ldr	r2, [pc, #452]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0xd4>
 8001804:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800180a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a67      	ldr	r2, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d013      	beq.n	800184c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fcac 	bl	8001180 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fca8 	bl	8001180 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e200      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0xe4>
 800184a:	e014      	b.n	8001876 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fc98 	bl	8001180 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fc94 	bl	8001180 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1ec      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x10c>
 8001872:	e000      	b.n	8001876 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d063      	beq.n	800194a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001882:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b08      	cmp	r3, #8
 8001898:	d11c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x18c>
 800189a:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d116      	bne.n	80018d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_RCC_OscConfig+0x176>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e1c0      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4939      	ldr	r1, [pc, #228]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	e03a      	b.n	800194a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fc4d 	bl	8001180 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ea:	f7ff fc49 	bl	8001180 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e1a1      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4927      	ldr	r1, [pc, #156]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fc2c 	bl	8001180 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192c:	f7ff fc28 	bl	8001180 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e180      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03a      	beq.n	80019cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d019      	beq.n	8001992 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fc0c 	bl	8001180 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fc08 	bl	8001180 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e160      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800198a:	2001      	movs	r0, #1
 800198c:	f000 fa9c 	bl	8001ec8 <RCC_Delay>
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff fbf2 	bl	8001180 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199e:	e00f      	b.n	80019c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff fbee 	bl	8001180 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d908      	bls.n	80019c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e146      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	42420000 	.word	0x42420000
 80019bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e9      	bne.n	80019a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80a6 	beq.w	8001b26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b8b      	ldr	r3, [pc, #556]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10d      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b88      	ldr	r3, [pc, #544]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a87      	ldr	r2, [pc, #540]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b85      	ldr	r3, [pc, #532]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a02:	2301      	movs	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b82      	ldr	r3, [pc, #520]	; (8001c10 <HAL_RCC_OscConfig+0x4c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d118      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	4b7f      	ldr	r3, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7e      	ldr	r2, [pc, #504]	; (8001c10 <HAL_RCC_OscConfig+0x4c8>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fbaf 	bl	8001180 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff fbab 	bl	8001180 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e103      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x4c8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x312>
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	e02d      	b.n	8001ab6 <HAL_RCC_OscConfig+0x36e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x334>
 8001a62:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a66      	ldr	r2, [pc, #408]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	e01c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x36e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCC_OscConfig+0x356>
 8001a84:	4b61      	ldr	r3, [pc, #388]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a60      	ldr	r2, [pc, #384]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	e00b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x36e>
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d015      	beq.n	8001aea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fb5f 	bl	8001180 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7ff fb5b 	bl	8001180 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0b1      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ee      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x37e>
 8001ae8:	e014      	b.n	8001b14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb49 	bl	8001180 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff fb45 	bl	8001180 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e09b      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ee      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d105      	bne.n	8001b26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1a:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a3b      	ldr	r2, [pc, #236]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8087 	beq.w	8001c3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d061      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d146      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <HAL_RCC_OscConfig+0x4cc>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fb19 	bl	8001180 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fb15 	bl	8001180 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e06d      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d108      	bne.n	8001b8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4921      	ldr	r1, [pc, #132]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a19      	ldr	r1, [r3, #32]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	491b      	ldr	r1, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fae9 	bl	8001180 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff fae5 	bl	8001180 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e03d      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x46a>
 8001bd0:	e035      	b.n	8001c3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_RCC_OscConfig+0x4cc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fad2 	bl	8001180 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff face 	bl	8001180 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e026      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x498>
 8001bfe:	e01e      	b.n	8001c3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e019      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
 8001c14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x500>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0d0      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d910      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4965      	ldr	r1, [pc, #404]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b8      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	494d      	ldr	r1, [pc, #308]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d040      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d115      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e073      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e06b      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4936      	ldr	r1, [pc, #216]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fa20 	bl	8001180 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff fa1c 	bl	8001180 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e053      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d210      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e032      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4916      	ldr	r1, [pc, #88]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dda:	f000 f821 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	490a      	ldr	r1, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1cc>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f97e 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08002770 	.word	0x08002770
 8001e18:	2000004c 	.word	0x2000004c
 8001e1c:	20000050 	.word	0x20000050

08001e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d002      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x30>
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d003      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4e:	e027      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e52:	613b      	str	r3, [r7, #16]
      break;
 8001e54:	e027      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	0c9b      	lsrs	r3, r3, #18
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0c5b      	lsrs	r3, r3, #17
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e82:	fb03 f202 	mul.w	r2, r3, r2
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e004      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	613b      	str	r3, [r7, #16]
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea2:	613b      	str	r3, [r7, #16]
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	693b      	ldr	r3, [r7, #16]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	371c      	adds	r7, #28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	007a1200 	.word	0x007a1200
 8001ebc:	08002780 	.word	0x08002780
 8001ec0:	08002790 	.word	0x08002790
 8001ec4:	003d0900 	.word	0x003d0900

08001ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <RCC_Delay+0x34>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <RCC_Delay+0x38>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0a5b      	lsrs	r3, r3, #9
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee4:	bf00      	nop
  }
  while (Delay --);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	60fa      	str	r2, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f9      	bne.n	8001ee4 <RCC_Delay+0x1c>
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	2000004c 	.word	0x2000004c
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e041      	b.n	8001f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff f84e 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 fa74 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e03a      	b.n	8002032 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_TIM_Base_Start_IT+0x98>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00e      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d009      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_TIM_Base_Start_IT+0x9c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d010      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201e:	e007      	b.n	8002030 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800

08002048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9b4 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9a7 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9b6 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0204 	mvn.w	r2, #4
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f98a 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f97d 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f98c 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0208 	mvn.w	r2, #8
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f960 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f953 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f962 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0210 	mvn.w	r2, #16
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2208      	movs	r2, #8
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f936 	bl	80023f8 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f929 	bl	80023e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f938 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0201 	mvn.w	r2, #1
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fe74 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa7b 	bl	80026ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8fc 	bl	800241c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fa46 	bl	80026dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x1c>
 8002270:	2302      	movs	r3, #2
 8002272:	e0b4      	b.n	80023de <HAL_TIM_ConfigClockSource+0x186>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ac:	d03e      	beq.n	800232c <HAL_TIM_ConfigClockSource+0xd4>
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	f200 8087 	bhi.w	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	f000 8086 	beq.w	80023ca <HAL_TIM_ConfigClockSource+0x172>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d87f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d01a      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xa6>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d87b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b60      	cmp	r3, #96	; 0x60
 80022ce:	d050      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x11a>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d877      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d03c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xfa>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d873      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d058      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x13a>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d86f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d064      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d86b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d060      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d867      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d05a      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022fc:	e062      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800230e:	f000 f968 	bl	80025e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	609a      	str	r2, [r3, #8]
      break;
 800232a:	e04f      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800233c:	f000 f951 	bl	80025e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234e:	609a      	str	r2, [r3, #8]
      break;
 8002350:	e03c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f8c8 	bl	80024f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2150      	movs	r1, #80	; 0x50
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f91f 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 8002370:	e02c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800237e:	461a      	mov	r2, r3
 8002380:	f000 f8e6 	bl	8002550 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2160      	movs	r1, #96	; 0x60
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f90f 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 8002390:	e01c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 f8a8 	bl	80024f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f8ff 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 80023b0:	e00c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f000 f8f6 	bl	80025ae <TIM_ITRx_SetConfig>
      break;
 80023c2:	e003      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e000      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <TIM_Base_SetConfig+0xb8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00b      	beq.n	8002460 <TIM_Base_SetConfig+0x30>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d007      	beq.n	8002460 <TIM_Base_SetConfig+0x30>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a26      	ldr	r2, [pc, #152]	; (80024ec <TIM_Base_SetConfig+0xbc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_Base_SetConfig+0x30>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <TIM_Base_SetConfig+0xc0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d108      	bne.n	8002472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <TIM_Base_SetConfig+0xb8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00b      	beq.n	8002492 <TIM_Base_SetConfig+0x62>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d007      	beq.n	8002492 <TIM_Base_SetConfig+0x62>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <TIM_Base_SetConfig+0xbc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_Base_SetConfig+0x62>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <TIM_Base_SetConfig+0xc0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d108      	bne.n	80024a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <TIM_Base_SetConfig+0xb8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d103      	bne.n	80024d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	615a      	str	r2, [r3, #20]
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	40012c00 	.word	0x40012c00
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800

080024f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0201 	bic.w	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f023 030a 	bic.w	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	621a      	str	r2, [r3, #32]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0210 	bic.w	r2, r3, #16
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800257a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	031b      	lsls	r3, r3, #12
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800258c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	621a      	str	r2, [r3, #32]
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f043 0307 	orr.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	021a      	lsls	r2, r3, #8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	431a      	orrs	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4313      	orrs	r3, r2
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	609a      	str	r2, [r3, #8]
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002634:	2302      	movs	r3, #2
 8002636:	e046      	b.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002684:	d009      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800

080026dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <memset>:
 8002700:	4603      	mov	r3, r0
 8002702:	4402      	add	r2, r0
 8002704:	4293      	cmp	r3, r2
 8002706:	d100      	bne.n	800270a <memset+0xa>
 8002708:	4770      	bx	lr
 800270a:	f803 1b01 	strb.w	r1, [r3], #1
 800270e:	e7f9      	b.n	8002704 <memset+0x4>

08002710 <__libc_init_array>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	2600      	movs	r6, #0
 8002714:	4d0c      	ldr	r5, [pc, #48]	; (8002748 <__libc_init_array+0x38>)
 8002716:	4c0d      	ldr	r4, [pc, #52]	; (800274c <__libc_init_array+0x3c>)
 8002718:	1b64      	subs	r4, r4, r5
 800271a:	10a4      	asrs	r4, r4, #2
 800271c:	42a6      	cmp	r6, r4
 800271e:	d109      	bne.n	8002734 <__libc_init_array+0x24>
 8002720:	f000 f81a 	bl	8002758 <_init>
 8002724:	2600      	movs	r6, #0
 8002726:	4d0a      	ldr	r5, [pc, #40]	; (8002750 <__libc_init_array+0x40>)
 8002728:	4c0a      	ldr	r4, [pc, #40]	; (8002754 <__libc_init_array+0x44>)
 800272a:	1b64      	subs	r4, r4, r5
 800272c:	10a4      	asrs	r4, r4, #2
 800272e:	42a6      	cmp	r6, r4
 8002730:	d105      	bne.n	800273e <__libc_init_array+0x2e>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	f855 3b04 	ldr.w	r3, [r5], #4
 8002738:	4798      	blx	r3
 800273a:	3601      	adds	r6, #1
 800273c:	e7ee      	b.n	800271c <__libc_init_array+0xc>
 800273e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002742:	4798      	blx	r3
 8002744:	3601      	adds	r6, #1
 8002746:	e7f2      	b.n	800272e <__libc_init_array+0x1e>
 8002748:	08002794 	.word	0x08002794
 800274c:	08002794 	.word	0x08002794
 8002750:	08002794 	.word	0x08002794
 8002754:	08002798 	.word	0x08002798

08002758 <_init>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr

08002764 <_fini>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr
